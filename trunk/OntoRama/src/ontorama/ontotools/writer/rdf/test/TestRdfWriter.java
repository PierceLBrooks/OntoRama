package ontorama.ontotools.writer.rdf.test;import java.io.StringReader;import java.io.StringWriter;import java.util.LinkedList;import java.util.List;import junit.framework.TestCase;import ontorama.OntoramaConfig;import ontorama.backends.Backend;import ontorama.backends.p2p.P2PGlobals;import ontorama.model.graph.Edge;import ontorama.model.graph.EdgeType;import ontorama.model.graph.Graph;import ontorama.model.graph.GraphImpl;import ontorama.model.graph.GraphModificationException;import ontorama.model.graph.Node;import ontorama.ontotools.NoSuchRelationLinkException;import ontorama.ontotools.TestWebkbtoolsPackage;import ontorama.ontotools.writer.ModelWriter;import ontorama.ontotools.writer.ModelWriterException;import ontorama.ontotools.writer.rdf.RdfModelWriter;import com.hp.hpl.mesa.rdf.jena.mem.ModelMem;import com.hp.hpl.mesa.rdf.jena.model.Model;import com.hp.hpl.mesa.rdf.jena.model.RDFException;/* * Created by IntelliJ IDEA. * User: nataliya * Date: 4/10/2002 * Time: 10:48:08 * To change this template use Options | File Templates. */public class TestRdfWriter extends TestCase {		private Backend _backend;    private StringWriter _writer;    private List _testNodesList;    private List _testEdgesList;    private String _chairName = "Chair";    private String _armchairName = "Armchair";    private String _furnitureName = "Furniture";    private String _backrestName= "Backrest";    private String _legName = "Leg";    private String _otherChairsName = "OtherChairs";    private String _synonymChairName = "_chair";    private static String _ontoramaNamespace = P2PGlobals.ontoP2P_namespace;    private static String _rdfsNamespace = "http://www.w3.org/2000/01/rdf-schema#";    private static String _pmNamespace = "http://www.webkb.org/kb/theKB_terms.rdf/pm#";       private String _expectedString = "<rdf:RDF" +"  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'" +"  xmlns:NS0='http://www.webkb.org/kb/theKB_terms.rdf/pm#'" +"  xmlns:rdfs='http://www.w3.org/2000/01/rdf-schema#'" +" >" +"  <rdfs:Class rdf:about='http://www.ontorama.org/ontoP2P#Armchair'>" +"    <rdfs:subClassOf rdf:resource='http://www.ontorama.org/ontoP2P#Chair'/>" +"  </rdfs:Class>" +"  <rdfs:Class rdf:about='http://www.ontorama.org/ontoP2P#Chair'>" +"    <rdfs:subClassOf rdf:resource='http://www.ontorama.org/ontoP2P#Furniture'/>" +"    <NS0:part rdf:resource='http://www.ontorama.org/ontoP2P#Backrest'/>" +"    <NS0:part rdf:resource='http://www.ontorama.org/ontoP2P#Leg'/>" +"    <NS0:similar rdf:resource='http://www.ontorama.org/ontoP2P#OtherChairs'/>" +"    <rdfs:label>chair</rdfs:label>" +"  </rdfs:Class>" +"</rdf:RDF>";        private Model _expectedModel;        private Model _resultModel;    /**     * Test Rdf Writer.     * The way we are going to test this is: Write a stream from our model, then     * read and parse     * it and then check if it is consistent with the model.     */    public TestRdfWriter(String s) {        super(s);    }    public void setUp() throws NoSuchRelationLinkException, ModelWriterException,     							GraphModificationException, RDFException {    	OntoramaConfig.loadAllConfig("examples/test/data/testCase-examplesConfig.xml",    			"ontorama.properties", "examples/test/data/testCase-config.xml");   	    	    	_backend = OntoramaConfig.instantiateBackend(OntoramaConfig.defaultBackend, null);    	        _testEdgesList = new LinkedList();        _testNodesList = new LinkedList();        Graph graph = new GraphImpl();        Node chair = _backend.createNode(_chairName, _ontoramaNamespace + _chairName);        Node armchair = _backend.createNode(_armchairName, _ontoramaNamespace + _armchairName);        Node furniture = _backend.createNode(_furnitureName, _ontoramaNamespace + _furnitureName);        Node backrest = _backend.createNode(_backrestName, _ontoramaNamespace + _backrestName);        Node leg = _backend.createNode(_legName, _ontoramaNamespace + _legName);        Node otherChairs = _backend.createNode(_otherChairsName, _ontoramaNamespace + _otherChairsName);        Node synonym = _backend.createNode(_synonymChairName, _synonymChairName);        EdgeType edgeType_subtype = OntoramaConfig.getEdgeType(TestWebkbtoolsPackage.edgeName_subtype);        edgeType_subtype.setNamespace(_rdfsNamespace);        EdgeType edgeType_part = OntoramaConfig.getEdgeType(TestWebkbtoolsPackage.edgeName_part);        edgeType_part.setNamespace(_pmNamespace);        EdgeType edgeType_similar = OntoramaConfig.getEdgeType(TestWebkbtoolsPackage.edgeName_similar);        edgeType_similar.setNamespace(_pmNamespace);        EdgeType edgeType_synonym = OntoramaConfig.getEdgeType(TestWebkbtoolsPackage.edgeName_synonym);        edgeType_synonym.setNamespace(_rdfsNamespace);                Edge edge1 = _backend.createEdge(chair, armchair, edgeType_subtype );        graph.addEdge(edge1);        Edge edge2 = _backend.createEdge(furniture, chair, edgeType_subtype);        graph.addEdge(edge2);        Edge edge3 = _backend.createEdge(chair, backrest, edgeType_part);        graph.addEdge(edge3);        Edge edge4 = _backend.createEdge(chair, leg, edgeType_part);        graph.addEdge(edge4);        Edge edge5 = _backend.createEdge(chair, otherChairs, edgeType_similar);        graph.addEdge(edge5);        Edge edge6 = _backend.createEdge(chair, synonym, edgeType_synonym);        graph.addEdge(edge6);        ModelWriter modelWriter = new RdfModelWriter();        _writer = new StringWriter();        modelWriter.write(graph, _writer);        String str = _writer.toString();                                       _resultModel = new ModelMem();        _resultModel.read(new StringReader(str),"");		_expectedModel = new ModelMem();		_expectedModel.read(new StringReader(_expectedString),"");    }    public void testResultingModelStatements () throws RDFException {        assertEquals("number of statements read from RDF should be the same as in the test model",         					Util.getStmtIteratorSize(_expectedModel.listStatements()),         					Util.getStmtIteratorSize(_resultModel.listStatements()));    }    public void testResultingModelSubjects () throws RDFException {        assertEquals("number of subjects read from RDF should be the same as in the test model",         					Util.getResIteratorSize(_expectedModel.listSubjects()),         					Util.getResIteratorSize(_resultModel.listSubjects()));    }    public void testResultingModelNamespaces ()  throws RDFException {        assertEquals("number of namespaces read form RDF should be the same as in the test model ",        					Util.getNsIteratorSize(_expectedModel.listNameSpaces()) ,        					Util.getNsIteratorSize(_resultModel.listNameSpaces()) );    }}
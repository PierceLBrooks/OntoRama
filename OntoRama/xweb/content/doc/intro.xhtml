<?xml version="1.0" encoding="UTF-8"?>

<html>
	<head>
		<title>OntoRama Documentation: Introduction</title>
	</head>
	<body>
		<h1 align="center">
			What is OntoRama for?
		</h1>
		<insertPrintLink href="intro_print.html"/>
		<a name="definitions"></a>
		<p>
			Ontorama is an Ontology browser. Here, 'ontology' is a set of terms with 
			relationships connecting these terms, forming a  hierarchy of terms.
			Each ontology term can have certain properties, such as description,
			creator, alternative term names (synonyms), in our documentation we
			call these properties 'concept type properties'. Also,  relationships
			between ontology terms are called 'relation links' and  can 
			be of different types (subtypeOf, partOf, etc).
		</p>
		<p>
			OntoRama is  tool is intended to be a <b>generic ontology browser</b>. 
		</p>
		<h3>Model</h3>
		<p>
			We model an ontology as a Graph with a set of nodes
			and edges. Each Node represents an ontology term and its
			properties (description, creator, etc)  are configurable. 
			Edges represent 'relation links' and are also configurable. 
			(<a href="config.html">See 'Configuration' section</a> for more details on
			config)
		</p>
		<h3>Clones</h3>
		<p>
			An ontology term can have more than one supertype, thus resulting in 
			a graph node with multipe parents (inbound edges). This can be 
			difficult to display and the resulting visualisation could be 
			confusing for a	user. Thus, we clone nodes that have multiple 
			parents. Each cloned node 'knows' about its clones and
			vice versa. 
			[..... how user can see that, example....]
		</p>
		<h3>Using RDF as input</h3>
		<p>
We have used RDF/XML as an input format. This
approach has benefits and disadvantages. 
</p>
<p>
Benefits are: RDF
is a widely used standard for knowledge exchange. Here is a quote from
W3C RDF website: "The RDF specifications provide a lightweight ontology
system to support the exchange of knowledge on the Web." Thus, by using
RDF we hope we should be able to process wider selection of ontologies.
Another advantage is technical: access to a good selection of RDF
software libraries. 
</p>
<p>
Disadvantages are: firstly, some of RDF ontologies that we came across
are not connected. Some ontology items are not reachable by
following subtype relation links from the top (root) item. OntoRama
relies on the fact that all its items are interconnected and are directly
or indirectly connected to the top ontology item. Secondly,  at
the moment OntoRama only displays concept types ("Classes" in RDF)
and ignores relation types ("Properties"). Thus, we are
loosing some information from ontologies.
</p>
		<h3>RDF Parser</h3>
		<p>
			We used Jena toolkit to parse RDF input. We have chosen this tool
			for a couple of reasons:
		</p>
		<ul>
			<li>
				This parser among all other things can build RDF memory model
				of RDF triples, 
				which is a very convenient and simple way to read RDF data 
				(as opposed
				to callback interface).
			</li>
			<li>
				Supports DAML ontologies, which is an added bonus for us.
			</li>
		</ul>
		<p>
			However, we encountered one problem with using Jena in our
			application: it's not totally compatable with Java Webstart.
			Java Webstart runs an application in a sandbox and has a lot of 
			security restrictions. One of restricted actions: reading and writing
			System properties. One of Jena's classes relies on this action.
			As a temporary workaround this we ammended the offending class and
			are using this updated Jena API.  We also notified jena development
			team and are hoping that this will be taken in consideration in the 
			future Jena releases.
		</p>
		<p>
			Some conventions:
			<br/>
			To simplify the drawings, a common convention is to omit the arrows 
			that show the direction of the ordering and to assume that the lower 
			node represents a subtype of the higher node in the TreeView. 
			(http://www.jfsowa.com/ontology/ontoshar.htm#s1). 
			<br/>
		</p>
		
	</body>
</html>
